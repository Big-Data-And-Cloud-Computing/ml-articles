<chapter title="A visual explanation of L1 Lasso and L2 Ridge regularization for linear models"
	 author={[Terence Parr](http://parrt.cs.usfca.edu)}>

<section title="Introduction">
	
Linear and logistic regression models are important because they are interpretable, fast, and form the basis of deep learning neural networks.  They are also extremely simple; we're just fitting lines (or hyperplanes) through training data. Unfortunately, linear models have a tendency to chase outliers in the training data, which often leads to models that don't generalize well to new data. To produce models that generalize better, we all know to *regularize* our models.  There are many forms of regularization, such as *early stopping* and *dropout* for deep learning, but for isolated linear models, *Lasso* and *Ridge* regularization are most common. (We'll call Lasso *L1* and Ridge *L2* for reasons that will become clear later.)

My goal in this article is to provide a visual explanation for regularization of linear models and to identify the critical stumbling block that makes it hard to understand how regularization works. Here it is upfront: **the math used to implement regularization does not correspond to the pictures everyone uses to explain regularization**. Take a look at the oft-copied picture on page 71 "Shrinkage Methods" from the excellent book *The Elements of Statistical Learning* (Hastie, Tibshirani, Friedman):

<img src="images/ESL_reg.png" width="40%">
	
Students see this multiple times in their careers but have trouble mapping that to the relatively straightforward mathematics used to regularize linear model training. The simple reason is that those graphs show how we  regularize models conceptually, with *hard constraints*, not how we actually implement regularization, with *soft constraints*! We'll go into that in detail shortly.  This single disconnect has no doubt caused untold amounts of consternation for those trying to deeply understand regularization. Read on to learn the real story.

I also want to answer key questions regarding L1 Lasso regularization: 

<ol>
<li> *Does L1 encourage model coefficients to shrink to zero or does it simply not discourage zeroes?* (**It encourages zeros.**)
<li> *If L1 encourages zero coefficients, why/how does it do that?!* (**The answer requires a picture, see below.**)
</ol>

These are not easy questions to answer in detail, even for mathematicians. Try explaining simply, without handwaving, to an inquisitive and persistent student; you'll find that you're not exactly sure. ;)

Regularization for linear and logistic regression is done through the same penalty term in the loss function and so I will focus on just linear regression in this article.

<section title="Review of linear regression">

I'm assuming that readers more or less understand the mathematics of linear models and how we find optimal model coefficients to fit lines, but let's take a minute to review the important equations so we're all on the same page. (My plan is to keep mathematics notation to a minimum in this article though.)

<sidefig caption="Best fit line through 10 sample data points with ordinary least squares regression." label="xyplot">	
<img src="images/ols.svg" width="80%">
</sidefig>

A single-variable linear regression model is familiar to us from high school algebra: $y = \beta_0 + \beta_1 x$, where (coefficient) $\beta_0$ is the $y$-intercept and $\beta_1$ is the slope of the line.  For example, let's say we have the following 10 training records and want to draw the *best fit* line through the points, as shown in [xyplot]. 

<pyeval label=reg hide=true output="df">
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.patches import Circle
import mpl_toolkits.mplot3d.art3d as art3d
from sklearn.linear_model import LinearRegression, Ridge, Lasso, LogisticRegression
np.set_printoptions(precision=2, suppress=True, linewidth=80)

df = pd.DataFrame(data=[[0.0,1.053880874257158],
[1.1111111111111112,1.6930723862524246],
[2.2222222222222223,-0.04867559455082526],
[3.3333333333333335,2.5201150366216343],
[4.444444444444445,4.978339964087746],
[5.555555555555555,5.78858680886268],
[6.666666666666667,7.023970174897514],
[7.777777777777779,6.026499123031133],
[8.88888888888889,9.58117222322382],
[10.0,10.762637572334718]], columns=['x','y'])
x = df['x'].values.reshape(-1,1)
y = df['y']
</pyeval>

The best fit line is $\hat{y} = -0.17 + 1.022x$, where we use $\hat{y}$ to indicate it is an approximation of the true underlying relationship between $x$ and $y$. Using Python and `sklearn`, it's trivial to fit a linear model to this data:

<pyeval label=reg>
lm = LinearRegression()        # Create a linear model
lm.fit(x, y)                   # Fit to x,y training data
</pyeval>

and get those optimal coefficients:

<pyeval label=reg>
optimal_beta0 = lm.intercept_
optimal_beta1 = lm.coef_[0]
y_pred = lm.predict(x)         # What does model predict for x? (orange line)
</pyeval>

<pyeval label=reg hide=true>
print(f"optimal_beta0 = {optimal_beta0:.3f}, optimal_beta1 = {optimal_beta1:.3f}")
print("y_pred", y_pred)
</pyeval>

The notion of *best fit* means choosing $\beta_0$ and $\beta_1$ to minimize the average error, the average difference between the known true $y^{(i)}$ values and the model predictions, $\hat{y}^{(i)}$.  To make things nice mathematically, and to avoid needing an absolute value operator, linear regression optimizes the average (mean) squared error.  That's where the term *Ordinary Least Squares* (OLS) comes from. The MSE function is a quadratic that always gives us a bowl shaped loss function, for 2 coefficients anyway, as shown in [ols3D].  For all $n$ training records $(x^{(i)},y^{(i)})$, we find $\beta_0,\beta_1$ to minimize:

\[
MSE(\beta_0,\beta_1) = \frac{1}{n} \sum_{i=1}^{n} (y^{(i)} - \hat{y}^{(i)})^2
\]

(If you're a `numpy` junkie, that is just `np.mean(y - m.predict(x))` for vectors `y` and `x`.) Plugging the model, our line equation, into that MSE we get:

\[
MSE(\beta_0,\beta_1) = \frac{1}{n} \sum_{i=1}^{n} (y^{(i)} - (\beta_0 + \beta_1 x^{(i)}))^2
\]

The loss function goes up as $\beta_0$ and $\beta_1$ move away from the bottom of the bowl. The big black dot represents the minimum loss location, $(\beta_0, \beta_1)$ = (-0.17, 1.022). (See [code/loss3d.py](code/loss3d.py) for the code.) Three-dimensional plots are sometimes hard to interpret on a two-dimensional screen, so you will often see the loss function projected down onto the $\beta_0$, $\beta_1$ plane, as shown in [ols2D] ([code/loss2d.py](code/loss2d.py)).

It's important to see the relationship between [xyplot] and [ols3D]. So, just to be clear, shifting $\beta_0$ and $\beta_1$ in [ols3D] causes the orange line in [xyplot] to tilt or move up and down, away from the best fit.



<sidefig caption="Loss function in 3D where the black dot shows the smallest loss, the bottom of the bowl." label="ols3D">	
	<img src="images/ols_loss_3D.svg" width="80%">
</sidefig>


<sidefig caption="Loss function contour projected onto 2D plane, as if we were looking from above." label="ols2D">	
	<img src="images/ols_loss_2D.svg" width="70%">
</sidefig>
	


<section title="Motivation">

So far so good.  Given some data, we can fit a best fit line through the data where "best fit" means the line that minimizes the average squared between true $y$ values and those predicted by the model. Now, let's tweak the last $y$ value to be about 10 times as big: 

<pyeval label=reg>
y.iloc[-1] = 100        # Make last y be an outlier 10x as big
lm = LinearRegression()
lm.fit(x, y)
y_pred = lm.predict(x)  # Get orange line points again
</pyeval>

<pyeval label=reg hide=true>
optimal_beta0 = lm.intercept_
optimal_beta1 = lm.coef_[0]
y_pred = lm.predict(x)         # What does model predict for x? (orange line)
print(f"optimal_beta0 = {optimal_beta0:.3f}, optimal_beta1 = {optimal_beta1:.3f}")
print("y_pred", y_pred)
</pyeval>

Look what happens to the best (orange) fit line, as shown in [outlier]!  It has tilted substantially upwards towards the outlier. Because the loss function squares the error, an outlier can seriously distort the shape of the "bowl" and, hence, the minimum location of the optimal $\beta_0$ and $\beta_1$ coefficients.  Instead of $\beta_0=-0.170$ and $\beta_1 = 1.022$, the coefficients are $\beta_0=-13.150$ and $\beta_0=5.402$. All real data is noisy and sometimes outliers are common, which provides us with the motivation to regularize our linear models.

Let's try Ridge regularization. Using `sklearn` again, we can fit a new line through the data using Ridge regression:

<pyeval label=reg>
lm = Ridge(alpha=300)
lm.fit(x, y)
y_pred = lm.predict(x)
</pyeval>

<pyeval label=reg hide=true>
optimal_beta0 = lm.intercept_
optimal_beta1 = lm.coef_[0]
y_pred = lm.predict(x)         # What does model predict for x? (orange line)
print(f"optimal_beta0 = {optimal_beta0:.3f}, optimal_beta1 = {optimal_beta1:.3f}")
print("y_pred", y_pred)
</pyeval>

The `alpha=300` hyper parameter controls how much regularization we need, in this case a lot. (For those using TensorFlow's `keras` interface, you might use something like `activity_regularizer=regularizers.l2(300)` in one of your layers.)  While `sklearn` uses `alpha`, we will use $\lambda$ as the regularization hyper parameter as we get into the regularization penalty term of the loss function. Notice that the regularized slope, $\beta_1 = 1.369$, is very close to the unregularized $\beta_1 = 1.022$ without the outlier. With regularization, the orange fitted line is held back to an appropriate angle, as shown in [ridge].  Using Lasso regularization, `Lasso(alpha=45).fit(x, y)`, we'd get similar results.

The price we pay for keeping the angle sane, is a less accurate (biased) overall result than we saw for the unregularized model for non-outlier data.  The regularized $y$-intercept is larger, $\beta_0 = 7.02$, compared to unregularized $\beta_0=-0.17$ for the data without the outlier. You can see that the orange line rests above the majority of the data points instead of going through them. The outlier is still pulling the best fit line upward a little bit.

<sidefig caption="." label="outlier">	
	<img src="images/ols_outlier.svg" width="70%">
</sidefig>

<sidefig caption="." label="ridge">	
	<img src="images/ridge.svg" width="70%">
</sidefig>


<section title="The simple idea behind regularization">

We've motivated the need for regularization by showing how even a single outlier can seriously skew our model, but we still have no idea how regularization works.  Let's look at a real but small data set called [Ames housing price data](http://jse.amstat.org/v19n3/decock.pdf) ([ames.csv](code/ames.csv)) because it will point is in the direction of the solution. [ames_ols] shows a bar chart with one bar per coefficient using unregularized linear regression (with normalized explanatory variables and dummy-encoded categorical variables). Wow. Those are some big coefficients and, in fact, I had to clip them to slope magnitudes less than 1e8!  Contrast that with the Ridge-regularized coefficients in [ames_L2], which are in a much more reasonable range. The accuracy of the unregularized model is ridiculously bad, with an error of $9.1^{12}$ dollars on a 20% validation set. Using Ridge regression, however, the error is only about \$18k per house. With an average house price of about \$180k, that's only 10% error on the same validation set. (If you're an R^2 fan, the regularized validation R^2 is 0.84.)

That gives us the clue we need to arrive at the premise of regularization: **extreme coefficients are unlikely to yield models that generalize well.** The solution, therefore, is simply to constrain the magnitude of linear model coefficients so they don't get too big.  Constraining the coefficients means not allowing them to reach their optimal position, at the minimum loss location.  That means we pay a price for improved generality in the form of decreased accuracy (increase in bias). Recall what we observed in [ridge] where the orange line sat a bit above the majority of the data. This is a worthwhile trade because, as we can see from this example, unregulated models on real data sets don't generalize well (they have terrible accuracy on validation sets).

<sidefig caption="OLS regression coefficients; data was normalized, dummy-encoded categorical variables." label="ames_ols">	
	<img src="images/ames_ols.svg" width="100%">
</sidefig>

<sidefig caption="Ridge regression coefficients; data was  normalized, dummy-encoded categorical variables. 5-fold cross validation grid search used to identify best alpha value." label="ames_L2">	
	<img src="images/ames_L2.svg" width="100%">
</sidefig>

<section title="How regularization works conceptually">

At this point, we've set the stage: Regularization is important for model generalization and the idea behind regularization is simply to constrain coefficients, at a small cost in overall accuracy.   Now, let's figure out how regularization constrains coefficients, at least conceptually. (In the next section, we'll look at how regularization actually works in practice.) 

Take a look at the hypothetical loss function in [reg1beta], which is just $(\beta-2)^2$ for some $\beta$ coefficient. (In terms of high school $x$ and $y$, this is just $y= (x-2)^2$.) The minimum loss is the bottom of the curve at $\beta = 2$. But, imagine we know that any coefficient bigger than 1.0 (or -1.0) will reduce generality. The best regularized coefficient is, therefore, $\beta = 1.0$, which is on the constraint line in the direction of the minimum. By "best," we mean the closest we can get a coefficient to the loss function minimum without exceeding our constraint.  

<sidefig caption="One coefficient regularization." label="reg1beta">	
	<img src="images/reg1D.svg" width="100%">
</sidefig>
<sidefig caption="Two coefficient regularization." label="reg2beta">	
	<img src="images/reg3D.svg" width="115%">
</sidefig>

If the loss function minimum were on the other side of the vertical axis at, say, $\beta=-2$ then the best regularized coefficient would be $\beta=-1$. We call this constraint of coefficients a *hard constraint* because the coefficients are strictly limited. (Foreshadowing, we actually implement these with soft constraints that just make bigger coefficients more and more expensive; see next section.) Mathematically, this hard constraint in one dimension is $|\beta| < t$, but we could also use $\beta^2 < t$ where $t$ represents the largest coefficient we want to allow ($t=1$ in this case).

Now, let's consider a case where we have two coefficients to regularize instead of one (there are two variables in our explanatory matrix). [reg2beta] shows a hypothetical loss function where the minimum is at $\beta_1=7$, $\beta_2=1$.   Surrounding the origin (0,0) there is a circular hard constraint that would prevent coefficients from reaching the minimum loss function location. The  best we could do would be coefficients on the constraint circle in the direction of the loss function minimum.  Constraining two coefficients to a circle of radius $r$ surrounding the origin means constraining the length of vector (0,0) to $(\beta_1, \beta_2)$ to $r$. The length of a vector is just the square root of the sum of the elements, $\sqrt{\beta_1^2 + \beta_2^2} < r$. Or, we could get rid of the square root and pick some other constant, $t$, for the constraint: $\beta_1^2 + \beta_2^2 < t$.

The regularized loss functions then just have a "subject to" constraint added to them.  If we use the absolute value, we get Lasso regularization:

\[
MSE(\beta_0,\beta_1,t) = \frac{1}{n} \sum_{i=1}^{n} (y^{(i)} - (\beta_0 + \beta_1 x^{(i)}))^2 \text{ subject to } |\beta_1| < t
\]

The square of the coefficient gives us Ridge regularization:

\[
MSE(\beta_0,\beta_1,t) = \frac{1}{n} \sum_{i=1}^{n} (y^{(i)} - (\beta_0 + \beta_1 x^{(i)}))^2 \text{ subject to } \beta_1^2 < t
\]

Note that we constrain just to the $\beta_1$ slope, not the $y$-intercept $\beta_0$ (see page 64 in "*The elements of statistical learning*").


L2 penalizing sum of squares is called weight decay in neural networks.

	Lasso: "least absolute shrinkage and selection operator"
	
	why ridge?  the original paper says it's because the surface plots of loss functions can look like ridges, due to the  quadratic nature.  for more good-natured poking of fun see [Statisticians say the darndest things](https://explained.ai/statspeak/index.html)
	


(click to enlarge)

<figure label="fig:split-sets" caption="blort">
<table>
<tr><th>(a)<th>(b)<th>(c)<th>(d)
<tr>
	<td><img src="images/l2-symmetric-0.svg" width="100%">
	<td><img src="images/l2-symmetric-1.svg" width="100%">
	<td><img src="images/l2-symmetric-2.svg" width="100%">
	<td><img src="images/l2-symmetric-3.svg" width="100%">
</table>
</figure>

<figure label="fig:split-sets" caption="blort">
<table>
<tr><th>(a)<th>(b)<th>(c)<th>(d)
<tr>
	<td><img src="images/l1-symmetric-0.svg" width="100%">
	<td><img src="images/l1-symmetric-1.svg" width="100%">
	<td><img src="images/l1-symmetric-2.svg" width="100%">
	<td><img src="images/l1-symmetric-3.svg" width="100%">
</table>
</figure>

<figure label="fig:split-sets" caption="blort">
<table>
<tr><th>(a)<th>(b)<th>(c)<th>(d)
<tr>
	<td><img src="images/l2-0.svg" width="100%">
	<td><img src="images/l2-1.svg" width="100%">
	<td><img src="images/l2-2.svg" width="100%">
	<td><img src="images/l2-3.svg" width="100%">
</table>
</figure>

<figure label="fig:split-sets" caption="blort">
<table>
<tr><th>(a)<th>(b)<th>(c)<th>(d)
<tr>
	<td><img src="images/l1-0.svg" width="100%">
	<td><img src="images/l1-1.svg" width="100%">
	<td><img src="images/l1-2.svg" width="100%">
	<td><img src="images/l1-3.svg" width="100%">
</table>
</figure>

<figure label="fig:split-sets" caption="blort">
<table>
<tr><th>(a)<th>(b)<th>(c)<th>(d)
<tr>
	<td><img src="images/l1-orthogonal-0.svg" width="100%">
	<td><img src="images/l1-orthogonal-1.svg" width="100%">
	<td><img src="images/l1-orthogonal-2.svg" width="100%">
	<td><img src="images/l1-orthogonal-3.svg" width="100%">
</table>
</figure>

<table>
<tr>
	<td><img src="images/l1-symmetric-cloud.png" width="60%">
	<td><img src="images/l2-symmetric-cloud.png" width="60%">
</table>

<table>
<tr>
	<td><img src="images/l1-cloud.png" width="60%">
	<td><img src="images/l2-cloud.png" width="60%">
</table>

<table>
<tr>
	<td><img src="images/l1-orthogonal-cloud.png" width="60%">
	<td><img src="images/l2-orthogonal-cloud.png" width="60%">
</table>

**Acknowledgements**. I'd like to thank mathematicians Steve Devlin and David Uminsky, also faculty in [University of San Francisco's MS in Data Science program](https://www.usfca.edu/arts-sciences/graduate-programs/data-science), for helping me understand the mathematics and why L1 regularization encourages zero coefficients.

<section title="Resources">

My MSDS621 project [Using gradient descent to fit regularized linear models](https://github.com/parrt/msds621/raw/master/projects/linreg/linreg.pdf)

	[Deep Learning Basics Lecture 3: Regularization I (slides)](https://www.cs.princeton.edu/courses/archive/spring16/cos495/slides/DL_lecture3_regularization_I.pdf) by Yingyu Liang at  Princeton University.
	
[Regularized Regression](https://uc-r.github.io/regularized_regression) from University of Cincinnati.

[Lecture notes on ridge regression](https://arxiv.org/pdf/1509.09169.pdf) by Wessel N. van Wieringen.

[Ridge Regression: Biased Estimation for Nonorthogonal Problems](https://www.math.arizona.edu/~hzhang/math574m/Read/RidgeRegressionBiasedEstimationForNonorthogonalProblems.pdf) by Hoerl and Kennard, Journal Technometrics, 1970.

[ Regression Shrinkage and Selection via the Lasso](http://www-stat.stanford.edu/~tibs/lasso/lasso.pdf) by Tibshirani in Journal of the Royal Statistical Society, 1996.